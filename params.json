{"name":"Aura.js","tagline":"A scalable, event-driven JavaScript architecture for developing widget-based applications.","body":"# Aura 0.9pre \r\n\r\nAura is an event-driven architecture for developing widget-based applications that scale. It is framework-agnostic, adapts many best-practice patterns for developing maintainable apps and has first-class support for modern tools like [Bower](http://bower.io), [Grunt](http://gruntjs.com) and [Yeoman](http://yeoman.io).\r\n\r\nAura has been used to develop applications like [MIT's Reap](http://www.bobholt.me/2012/09/how-it-was-built-mit-reap/) and is currently under active development.\r\n\r\nWant to look at some sample apps built with Aura? Check out the [GitHub client](https://github.com/sbellity/aura-github), the [GitHub Mobile client](https://github.com/hull/Github-Mobile/tree/with-hull),  an Aura [Todo](https://github.com/sbellity/aura-todos/) app implemented [two](https://github.com/alexanderbeletsky/todomvc-aura) ways and [Hullagram](https://github.com/hull/hullagram) - an Instagram clone built with Aura and [Hull.io](http://hull.io).\r\n\r\n<img src=\"https://raw.github.com/hull/aura-identity/master/logo/export/halo.png\" width=\"300px\"/>\r\n\r\n## Why Aura?\r\n\r\n* It's basically **glue** for your application widgets, making it trivial to tie together a number of independently created widgets into a fully functional application.\r\n* A complete event-bus supporting **application-level and widget-level communication** mean you have control over what is getting triggered in your app\r\n* Specify an API end-point for widgets easily and just **use data-attributes to include any widget** or widgets. Minimal JavaScript for more capabilities.\r\n* **Abstract away utility libraries** you are using (templating, DOM manipulation) so that you can swap them out for alternatives at any time without a great deal of effort\r\n* Hit the ground running quickly widgets into **reusable modules using AMD**.\r\n* Bower is a first-class citizen in Aura, making it easier to **manage your application dependencies**\r\n* The web platform is moving towards using scoped styles and shadow DOM for keeping parts of your page safe from third-party content that might affect it. Aura does the same for communications by introducing per-widget **sandboxes** for your events\r\n* Tooling for **scaffolding** out new widgets without having to write as much boilerplate\r\n* Can be used with your MVC framework of choice - we're just there as a helper.\r\n* First-class support for the Hull.io platform. If you don't want to create a widget yourself, you can easily use them as a widget-source and create apps in less time.\r\n* Extensible via the extensions system, which make a good basis for a rich ecosystem around the project.\r\n\r\n\r\n## Concepts\r\n\r\n### The `Aura` object\r\n\r\nYour application will be an instance of the `Aura` object.\r\n\r\nIts responsibilities are to load extensions when the app starts and clean them up when the app stops.\r\n\r\n### Extension\r\n\r\nExtensions are loaded in your application when it starts. They allow you to add features to the application, and are available to the widgets through their `sandbox`.\r\n\r\n### Core\r\n\r\nThe `core` implements aliases for DOM manipulation, templating and other lower-level utilities that pipe back to a library of choice. Aliases allow switching libraries with minimum impact on your application.\r\n\r\n### Sandbox\r\n\r\nA `sandbox` is just a way to implement the [facade](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#facadepatternjavascript) pattern on top of features provided by `core`. It lets you expose the parts of a JavaScript library that are safe to use instead of exposing the entire API. This is particularly useful when working in teams.\r\n\r\nWhen your app starts, it will create an instance of `sandbox` in each of your widgets.\r\n\r\n### Widget\r\n\r\nA widget represents a unit of a page. Each widget is independent.\r\nThis means that they know nothing about each other. To make them communicate, a [Publish/Subscribe (Mediator)](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#mediatorpatternjavascript) pattern is used.\r\n\r\n\r\n## Getting started\r\n\r\nThe simplest usable Aura app using a widget and extension can be found in our [boilerplate](https://github.com/aurajs/boilerplate) repo. We do however recommend reading the rest of the getting started guide below to get acquainted with the general workflow.\r\n\r\n### Requirements\r\n\r\n1. [bower](http://twitter.github.com/bower/): run `npm install -g bower` if needed\r\n2. [grunt-cli](https://github.com/gruntjs/grunt-cli): run `npm install -g grunt-cli` if needed\r\n\r\n### Building Aura.js\r\n\r\n1. Run `npm install` to install build dependencies.\r\n2. Run `bower install` to install lib dependencies.\r\n3. Run `grunt build` and `aura.js` will be placed in `dist/`.\r\n\r\n### How to run tests\r\n\r\n#### Browser\r\n\r\nRun `grunt`. Then visit `http://localhost:8899/spec/`.\r\n\r\n#### CLI\r\n\r\nRun `npm test`.\r\n\r\n### Creating an Application\r\n\r\nThe first step in creating an Aura application is to make an instance of `Aura`.\r\n\r\n```js\r\nvar app = new Aura();\r\n```\r\n\r\nNow that we have our `app`, we can start it.\r\n\r\n```js\r\napp.start({\r\n  widget: 'body'\r\n});\r\n```\r\n\r\nThis starts the app by saying that it should search for widgets anywhere in the `body` of your HTML document.\r\n\r\n### Creating a Widget\r\n\r\nBy default widgets are retrieved from a directory called `widgets/` that must be at the same level as your HTML document.\r\n\r\nLet's say we want to create an \"hello\" widget. To do that we need to create a `widgets/hello/` directory\r\n\r\nThis directory must contain:\r\n\r\n- A `main.js` file. It will bootstrap and describe the widget. It is mandatory, no matter how small it can be.\r\n- All the other files that your widget needs (models, templates, â€¦).\r\n\r\nFor our \"hello\" widget the `main.js` will be:\r\n\r\n```js\r\ndefine({\r\n  initialize: function () {\r\n    this.$el.html('<h1>Hello Aura</h1>');\r\n  }\r\n});\r\n```\r\n\r\n### Declaring a Widget\r\n\r\nAdd the following code to your HTML document.\r\n\r\n```html\r\n<div data-aura-widget=\"hello\"></div>\r\n```\r\n\r\nAura will call the `initialize` method that we have defined in `widgets/hello/main.js`.\r\n\r\n### Creating an extension\r\n\r\nImagine that we need an helper to reverse a string. In order to accomplish that we'll need to create an extension.\r\n\r\n```js\r\ndefine('extensions/reverse', {\r\n  initialize: function (app) {\r\n    app.core.util.reverse = function (string) {\r\n      return string.split('').reverse().join('');\r\n    };\r\n  }\r\n});\r\n```\r\n\r\n### Using extensions\r\n\r\nTo make our `reverse` helper available in our app, run the following code:\r\n\r\n```js\r\napp.use('extensions/reverse');\r\n```\r\n\r\nThis will call the `initialize` function of our `reverse` extension.\r\n\r\nCalling `use` when your `app` is already started will throw an error.\r\n\r\n### Debugging\r\n\r\nTo make `app.logger` available, pass `{debug: true}` into Aura constructor:\r\n\r\n```js\r\nvar app = new Aura({debug: true});\r\n```\r\n\r\nLogger usage:\r\n\r\n```js\r\n// You can use logger from widgets or extensions\r\nvar logger = sandbox.logger;\r\n\r\nlogger.log('Hey');\r\nlogger.warn('Hey');\r\nlogger.error('Hey');\r\n```\r\n\r\nIf you want to enable event logging, do this:\r\n\r\n```js\r\nvar app = new Aura({debug: true, logEvents: true});\r\n```\r\n\r\nAlso, when parameter `debug` is true, you can declare following function for any debug purposes:\r\n\r\n```js\r\n// Function will be called for all Aura apps in your project\r\nwindow.attachDebugger = function (app) {\r\n  // Do cool stuff with app object\r\n  console.log(app);\r\n\r\n  // Maybe you want to have access to Aura app via developer console?\r\n  window.aura = app;\r\n};\r\n```\r\n\r\n\r\n## Resources\r\n\r\n### Yeoman generator\r\n\r\nAn Aura scaffolding generator (for Yeoman) is also available at [Aura generator](https://github.com/dotCypress/generator-aura).\r\n\r\n### Usage\r\n\r\n```bash\r\n# First make a new directory, and `cd` into it:\r\nmkdir my-awesome-project && cd $_\r\n\r\n# Then install `generator-aura`:\r\nnpm install -g generator-aura\r\n\r\n# Run `yo aura`, optionally passing an app name:\r\nyo aura [app-name]\r\n\r\n# Finally, install npm and bower dependencies:\r\nnpm install && bower install --dev\r\n```\r\n\r\n### Generators\r\n\r\nAvailable generators:\r\n\r\n* [aura:widget](#widget)\r\n* [aura:extension](#extension)\r\n* [aura:styles](#styles)\r\n\r\n#### Widget\r\nGenerates a widget in `app/widgets`.\r\n\r\nExample:\r\n\r\n```bash\r\nyo aura:widget sample\r\n```\r\n\r\nProduces `app/widgets/sample/main.js`\r\n\r\n#### Extension\r\nGenerates a extension in `app/extensions`.\r\n\r\nExample:\r\n```bash\r\nyo aura:extension storage\r\n```\r\n\r\nProduces `app/extensions/storage.js`\r\n\r\n#### Styles\r\nGenerates cool styles.\r\n\r\nExample:\r\n```bash\r\nyo aura:styles\r\n```\r\n\r\n##### Supported types:\r\n\r\n* Default (normalize.css)\r\n* Twitter Bootstrap\r\n* Twitter Bootstrap for Compass\r\n* Zurb Foundation\r\n\r\n\r\n### Aura Development docs\r\n\r\n* [Notes](https://github.com/aurajs/aura/tree/master/notes)\r\n\r\n## Contribute\r\n\r\nSee the [contributing docs](https://github.com/aurajs/aura/blob/master/contributing.md)\r\n\r\n## Project status\r\n\r\nAura 0.8.x was well received by the developer community, but had regular requests for a few advanced capabilities. These included individual sandboxes, declarative widgets, support for Bower and a powerful Pub/Sub implementation amongst others.\r\n\r\nTo cater for this, Aura has been getting a heavy re-write over the past few months and we anticipate releasing a beta that can be tested in April, 2013. This will be followed by detailed documentation and new demo applications.\r\n\r\nA version of Aura currently powers the [Hull.io](http://hull.io) widget platform and we are honored to have members of that team directly contributing to the next version of the project.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}